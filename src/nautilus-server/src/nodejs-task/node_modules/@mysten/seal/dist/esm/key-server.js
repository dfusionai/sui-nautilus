import { fromBase64, fromHex, toHex } from "@mysten/bcs";
import { bls12_381 } from "@noble/curves/bls12-381";
import { KeyServerMove } from "./bcs.js";
import {
  InvalidGetObjectError,
  InvalidKeyServerVersionError,
  SealAPIError,
  UnsupportedFeatureError,
  UnsupportedNetworkError
} from "./error.js";
import { DST_POP } from "./ibe.js";
import { PACKAGE_VERSION } from "./version.js";
import { flatten, Version } from "./utils.js";
var KeyServerType = /* @__PURE__ */ ((KeyServerType2) => {
  KeyServerType2[KeyServerType2["BonehFranklinBLS12381"] = 0] = "BonehFranklinBLS12381";
  return KeyServerType2;
})(KeyServerType || {});
const SERVER_VERSION_REQUIREMENT = new Version("0.2.0");
function getAllowlistedKeyServers(network) {
  if (network === "testnet") {
    return [
      "0xb35a7228d8cf224ad1e828c0217c95a5153bafc2906d6f9c178197dce26fbcf8",
      "0x2d6cde8a9d9a65bde3b0a346566945a63b4bfb70e9a06c41bdb70807e2502b06"
    ];
  } else {
    throw new UnsupportedNetworkError(`Unsupported network ${network}`);
  }
}
async function retrieveKeyServers({
  objectIds,
  client
}) {
  return await Promise.all(
    objectIds.map(async (objectId) => {
      let res;
      try {
        res = await client.core.getObject({
          objectId
        });
      } catch (e) {
        throw new InvalidGetObjectError(`KeyServer ${objectId} not found; ${e.message}`);
      }
      const ks = KeyServerMove.parse(res.object.content);
      if (ks.keyType !== 0) {
        throw new UnsupportedFeatureError(`Unsupported key type ${ks.keyType}`);
      }
      return {
        objectId,
        name: ks.name,
        url: ks.url,
        keyType: 0 /* BonehFranklinBLS12381 */,
        pk: new Uint8Array(ks.pk)
      };
    })
  );
}
async function verifyKeyServer(server, timeout) {
  const requestId = crypto.randomUUID();
  const response = await fetch(server.url + "/v1/service", {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
      "Request-Id": requestId,
      "Client-Sdk-Type": "typescript",
      "Client-Sdk-Version": PACKAGE_VERSION
    },
    signal: AbortSignal.timeout(timeout)
  });
  await SealAPIError.assertResponse(response, requestId);
  verifyKeyServerVersion(response);
  const serviceResponse = await response.json();
  if (serviceResponse.service_id !== server.objectId) {
    return false;
  }
  const fullMsg = flatten([DST_POP, server.pk, fromHex(server.objectId)]);
  return bls12_381.verifyShortSignature(fromBase64(serviceResponse.pop), fullMsg, server.pk);
}
function verifyKeyServerVersion(response) {
  const keyServerVersion = response.headers.get("X-KeyServer-Version");
  if (keyServerVersion == null) {
    throw new InvalidKeyServerVersionError("Key server version not found");
  }
  if (new Version(keyServerVersion).older_than(SERVER_VERSION_REQUIREMENT)) {
    throw new InvalidKeyServerVersionError(
      `Key server version ${keyServerVersion} is not supported`
    );
  }
}
class BonehFranklinBLS12381DerivedKey {
  constructor(key) {
    this.key = key;
    this.representation = toHex(key.toBytes());
  }
  toString() {
    return this.representation;
  }
}
export {
  BonehFranklinBLS12381DerivedKey,
  KeyServerType,
  SERVER_VERSION_REQUIREMENT,
  getAllowlistedKeyServers,
  retrieveKeyServers,
  verifyKeyServer,
  verifyKeyServerVersion
};
//# sourceMappingURL=key-server.js.map
