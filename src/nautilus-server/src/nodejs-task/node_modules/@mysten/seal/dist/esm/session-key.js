var __typeError = (msg) => {
  throw TypeError(msg);
};
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var _address, _packageId, _creationTimeMs, _ttlMin, _sessionKey, _personalMessageSignature, _signer, _client;
import { toBase64 } from "@mysten/bcs";
import { bcs } from "@mysten/sui/bcs";
import { Ed25519Keypair } from "@mysten/sui/keypairs/ed25519";
import { isValidSuiAddress, isValidSuiObjectId } from "@mysten/sui/utils";
import { verifyPersonalMessageSignature } from "@mysten/sui/verify";
import { generateSecretKey, toPublicKey, toVerificationKey } from "./elgamal.js";
import {
  ExpiredSessionKeyError,
  InvalidPersonalMessageSignatureError,
  UserError
} from "./error.js";
const RequestFormat = bcs.struct("RequestFormat", {
  ptb: bcs.vector(bcs.U8),
  encKey: bcs.vector(bcs.U8),
  encVerificationKey: bcs.vector(bcs.U8)
});
const _SessionKey = class _SessionKey {
  constructor({
    address,
    packageId,
    ttlMin,
    signer,
    client
  }) {
    __privateAdd(this, _address);
    __privateAdd(this, _packageId);
    __privateAdd(this, _creationTimeMs);
    __privateAdd(this, _ttlMin);
    __privateAdd(this, _sessionKey);
    __privateAdd(this, _personalMessageSignature);
    __privateAdd(this, _signer);
    __privateAdd(this, _client);
    if (!isValidSuiObjectId(packageId) || !isValidSuiAddress(address)) {
      throw new UserError(`Invalid package ID ${packageId} or address ${address}`);
    }
    if (ttlMin > 30 || ttlMin < 1) {
      throw new UserError(`Invalid TTL ${ttlMin}, must be between 1 and 30`);
    }
    if (signer && signer.getPublicKey().toSuiAddress() !== address) {
      throw new UserError("Signer address does not match session key address");
    }
    __privateSet(this, _address, address);
    __privateSet(this, _packageId, packageId);
    __privateSet(this, _creationTimeMs, Date.now());
    __privateSet(this, _ttlMin, ttlMin);
    __privateSet(this, _sessionKey, Ed25519Keypair.generate());
    __privateSet(this, _signer, signer);
    __privateSet(this, _client, client);
  }
  isExpired() {
    return __privateGet(this, _creationTimeMs) + __privateGet(this, _ttlMin) * 60 * 1e3 - 1e4 < Date.now();
  }
  getAddress() {
    return __privateGet(this, _address);
  }
  getPackageId() {
    return __privateGet(this, _packageId);
  }
  getPersonalMessage() {
    const creationTimeUtc = new Date(__privateGet(this, _creationTimeMs)).toISOString().slice(0, 19).replace("T", " ") + " UTC";
    const message = `Accessing keys of package ${__privateGet(this, _packageId)} for ${__privateGet(this, _ttlMin)} mins from ${creationTimeUtc}, session key ${toBase64(__privateGet(this, _sessionKey).getPublicKey().toRawBytes())}`;
    return new TextEncoder().encode(message);
  }
  async setPersonalMessageSignature(personalMessageSignature) {
    try {
      await verifyPersonalMessageSignature(this.getPersonalMessage(), personalMessageSignature, {
        address: __privateGet(this, _address),
        client: __privateGet(this, _client)
      });
      __privateSet(this, _personalMessageSignature, personalMessageSignature);
    } catch (e) {
      throw new InvalidPersonalMessageSignatureError("Not valid");
    }
  }
  async getCertificate() {
    if (!__privateGet(this, _personalMessageSignature)) {
      if (__privateGet(this, _signer)) {
        const { signature } = await __privateGet(this, _signer).signPersonalMessage(this.getPersonalMessage());
        __privateSet(this, _personalMessageSignature, signature);
      } else {
        throw new InvalidPersonalMessageSignatureError("Personal message signature is not set");
      }
    }
    return {
      user: __privateGet(this, _address),
      session_vk: toBase64(__privateGet(this, _sessionKey).getPublicKey().toRawBytes()),
      creation_time: __privateGet(this, _creationTimeMs),
      ttl_min: __privateGet(this, _ttlMin),
      signature: __privateGet(this, _personalMessageSignature)
    };
  }
  async createRequestParams(txBytes) {
    if (this.isExpired()) {
      throw new ExpiredSessionKeyError();
    }
    const egSk = generateSecretKey();
    const msgToSign = RequestFormat.serialize({
      ptb: txBytes.slice(1),
      encKey: toPublicKey(egSk),
      encVerificationKey: toVerificationKey(egSk)
    }).toBytes();
    return {
      decryptionKey: egSk,
      requestSignature: toBase64(await __privateGet(this, _sessionKey).sign(msgToSign))
    };
  }
  /**
   * Export the Session Key object from the instance. Store the object in IndexedDB to persist.
   */
  export() {
    const obj = {
      address: __privateGet(this, _address),
      packageId: __privateGet(this, _packageId),
      creationTimeMs: __privateGet(this, _creationTimeMs),
      ttlMin: __privateGet(this, _ttlMin),
      personalMessageSignature: __privateGet(this, _personalMessageSignature),
      sessionKey: __privateGet(this, _sessionKey).getSecretKey()
      // bech32 encoded string
    };
    Object.defineProperty(obj, "toJSON", {
      enumerable: false,
      value: () => {
        throw new Error("This object is not serializable");
      }
    });
    return obj;
  }
  /**
   * Restore a SessionKey instance for the given object.
   * @returns A new SessionKey instance with restored state
   */
  static async import(data, { signer, client }) {
    const instance = new _SessionKey({
      address: data.address,
      packageId: data.packageId,
      ttlMin: data.ttlMin,
      signer,
      client
    });
    __privateSet(instance, _creationTimeMs, data.creationTimeMs);
    __privateSet(instance, _sessionKey, Ed25519Keypair.fromSecretKey(data.sessionKey));
    if (data.personalMessageSignature) {
      await instance.setPersonalMessageSignature(data.personalMessageSignature);
    }
    if (instance.isExpired()) {
      throw new ExpiredSessionKeyError();
    }
    return instance;
  }
};
_address = new WeakMap();
_packageId = new WeakMap();
_creationTimeMs = new WeakMap();
_ttlMin = new WeakMap();
_sessionKey = new WeakMap();
_personalMessageSignature = new WeakMap();
_signer = new WeakMap();
_client = new WeakMap();
let SessionKey = _SessionKey;
export {
  RequestFormat,
  SessionKey
};
//# sourceMappingURL=session-key.js.map
